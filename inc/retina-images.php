<?php
/**
 * Nightingale 2.0 Retina Image
 *
 * @package Nightingale
 * @copyright NHS Leadership Academy, Tony Blacker
 * @version 1.1 21st August 2019
 * **/

/*
 * The below is all to detect, serve and process retina quality images. Taken from tutorial at https://code.tutsplus.com/tutorials/ensuring-your-theme-has-retina-support--wp-33430
 */
add_action( 'wp_enqueue_scripts', 'retina_support_enqueue_scripts' );
/**
 * Enqueueing retina.js
 *
 * This function is attached to the 'wp_enqueue_scripts' action hook.
 */
function retina_support_enqueue_scripts() {
	wp_enqueue_script( 'retina_js', get_template_directory_uri() . '/js/retina.js', '', '20190828', true );
}

add_filter( 'wp_generate_attachment_metadata', 'retina_support_attachment_meta', 10, 2 );
/**
 * Retina images
 *
 * This function is attached to the 'wp_generate_attachment_metadata' filter hook.
 *
 * @param array   $metadata The image file information.
 * @param integer $attachment_id the WordPress generated image resource identifier.
 */
function retina_support_attachment_meta( $metadata, $attachment_id ) {
	foreach ( $metadata as $key => $value ) {
		if ( is_array( $value ) ) {
			foreach ( $value as $image => $attr ) {
				if ( is_array( $attr ) ) {
					retina_support_create_images( get_attached_file( $attachment_id ), $attr['width'], $attr['height'], true );
				}
			}
		}
	}

	return $metadata;
}

/**
 * Create retina-ready images
 *
 * Referenced via retina_support_attachment_meta().
 *
 * @param array   $file  The raw file being uploaded.
 * @param integer $width How wide should the image be cropped.
 * @param integer $height How high should the image be cropped.
 * @param bool    $crop Are we cropping the image.
 */
function retina_support_create_images( $file, $width, $height, $crop = false ) {
	if ( $width || $height ) {
		$resized_file = wp_get_image_editor( $file );
		if ( ! is_wp_error( $resized_file ) ) {
			$filename = $resized_file->generate_filename( $width . 'x' . $height . '@2x' );

			$resized_file->resize( $width * 2, $height * 2, $crop );
			$resized_file->save( $filename );

			$info = $resized_file->get_size();

			return array(
				'file'   => wp_basename( $filename ),
				'width'  => $info['width'],
				'height' => $info['height'],
			);
		}
	}

	return false;
}

add_filter( 'delete_attachment', 'delete_retina_support_images' );
/**
 * Delete retina-ready images
 *
 * This function is attached to the 'delete_attachment' filter hook.
 *
 * @param integer $attachment_id The image id as generated by WP.
 */
function delete_retina_support_images( $attachment_id ) {
	$meta       = wp_get_attachment_metadata( $attachment_id );
	$upload_dir = wp_upload_dir();
	$path       = pathinfo( $meta['file'] );
	if ( !empty( $meta ) ) {
		foreach ( $meta as $key => $value ) {
			if ( 'sizes' === $key ) {
				foreach ( $value as $sizes => $size ) {
					$original_filename = $upload_dir['basedir'] . '/' . $path['dirname'] . '/' . $size['file'];
					$retina_filename   = substr_replace( $original_filename, '@2x.', strrpos( $original_filename, '.' ), strlen( '.' ) );
					if ( file_exists( $retina_filename ) ) {
						unlink( $retina_filename );
					}
				}
			}
		}
	}
}
